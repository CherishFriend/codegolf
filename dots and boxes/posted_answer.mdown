## C99 - 2x3 board in 44.5s

Here's a fairly naive solution to get things started.

__Edit:__ I refactored my code and did some deeper analysis on the results.

Primary features:

* straightforward implementation of minimax with alpha-beta pruning
* very little memory management (maintains dll of valid moves; O(1) updates per branch in the tree search)

Potential improvements:

* prune symmetries
* memoization
* <strike>fix small memory leak</strike> fixed in edit.
* <strike>alpha/beta pruning added</strike> in 2nd edit

__Brute-Force Minimax__

	#include "dotsnboxes.h"

	/* brute-force search of the _entire game tree_.
		at completion, final_value will be the best value for 'maximizer'.
		returns a pointer to the best move. */
	turn_dll_t* minimax(board_t* board, int maximizer, int* final_value, long int* turn_count, int depth){
		// only one base case: all the way to the end. careful with large boards!
		if(game_is_over(board)){
			(*final_value) = board->scores[maximizer] - board->scores[1-maximizer];
			return NULL;
		}
		turn_dll_t* sentinel = board->valid_turns;
		turn_dll_t* best_turn = sentinel;
		bool max = board->player_turn == maximizer;
		int score, best_score = max ? INT_MIN : INT_MAX;
		// loop over all possible turns
		for(turn_dll_t* current_turn = sentinel->next; current_turn != sentinel; current_turn = current_turn->next){
			// perform turn, remove it from DLL
			execute_turn(current_turn, board);
			turn_dll_t* memo = splice_turn_dll(current_turn);
			(*turn_count)++;
			// for(int i=0; i<depth; ++i) printf(" ");
			// 	printf("%d %d %d\n", current_turn->row, current_turn->col, current_turn->wall);
			// recurse to next level of the tree (without current_turn as an option anymore)
			minimax(board, maximizer, &score, turn_count, depth+1);
			// recursion done; undo move
			add_turn_dll(memo, current_turn);
			unexecute_turn(current_turn, board);
			if(max){
				// MAX algorithm
				best_turn = score > best_score ? current_turn : best_turn;
				best_score = max(best_score, score);
			} else{
				// MIN algorithm
				best_turn = score < best_score ? current_turn : best_turn;
				best_score = min(best_score, score);
			}
		}
		(*final_value) = best_score;
		return best_turn;
	}

	int main(){
		board_t board;
		stdin_to_board(&board);

		long int count = 0;

		int best_outcome;
		turn_dll_t* best_turn = minimax(&board, 0, &best_outcome, &count, 0);

		stats(&board, best_turn, best_outcome, count);

		cleanup(&board);
		
		return 0;
	}

__With Alpha-Beta Pruning__

	#include "dotsnboxes.h"

	turn_dll_t* minimax_ab(board_t* board, int maximizer, int* final_value, long int* turn_count, int alpha, int beta){
		// only one base case: all the way to the end. careful with large boards!
		if(game_is_over(board)){
			(*final_value) = board->scores[maximizer] - board->scores[1-maximizer];
			return NULL;
		}
		turn_dll_t* sentinel = board->valid_turns;
		turn_dll_t* best_turn = sentinel;
		bool max = board->player_turn == maximizer;
		int score, best_score = max ? INT_MIN : INT_MAX;
		// loop over all possible turns
		int t = 0;
		for(turn_dll_t* current_turn = sentinel->next; current_turn != sentinel; current_turn = current_turn->next){
			// perform turn, remove it from DLL
			execute_turn(current_turn, board);
			turn_dll_t* memo = splice_turn_dll(current_turn);
			(*turn_count)++;
			// recurse to next level of the tree
			minimax_ab(board, maximizer, &score, turn_count, alpha, beta);
			// recursion done; undo move
			add_turn_dll(memo, current_turn);
			unexecute_turn(current_turn, board);
			if(max){
				// MAX algorithm
				best_turn = score > best_score ? current_turn : best_turn;
				best_score = max(best_score, score);
				alpha = best_score;
			} else{
				// MIN algorithm
				best_turn = score < best_score ? current_turn : best_turn;
				best_score = min(best_score, score);
				beta = best_score;
			}
			if(beta <= alpha) break;
			t++;
		}
		(*final_value) = best_score;
		return best_turn;
	}

	int main(){
		board_t board;
		stdin_to_board(&board);

		long int count = 0;
		int best_outcome;
		turn_dll_t* best_turn = minimax_ab(&board, 0, &best_outcome, &count, INT_MIN, INT_MAX);

		stats(&board, best_turn, best_outcome, count);

		cleanup(&board);

		return 0;
	}

__Shared Header File dotsnboxes.h__

	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <stdbool.h>
	#include <limits.h>

	typedef short square_t;
	typedef short wall_t;
	typedef struct TurnList{
		int row, col;
		wall_t wall;
		// linked list of turns (which are valid)
		struct TurnList* prev;
		struct TurnList* next;
	} turn_dll_t;
	typedef struct Board{
		square_t* squares;
		turn_dll_t* valid_turns; // pointer to the sentinel of the doubly linked list of turns
		int rows;
		int cols;
		int player_turn;
		int scores[2];
	} board_t;

	#define TOP 0x1
	#define BOTTOM 0x2
	#define LEFT 0x4
	#define RIGHT 0x8

	// usually bad practice, but ok for small code
	#define max(a,b) (a) > (b) ? (a) : (b)
	#define min(a,b) (a) < (b) ? (a) : (b)

	turn_dll_t* make_turn_dll(int r, int c, wall_t wall){
		turn_dll_t* new_turn = (turn_dll_t*) malloc(sizeof(turn_dll_t));
		new_turn->wall = wall; // sentinel value
		new_turn->row = r;
		new_turn->col = c;
		// link to itself
		new_turn->prev = new_turn;
		new_turn->next = new_turn;
		return new_turn;
	}

	/* insert the 'new' dll node between 'after' and 'after->next' */
	void add_turn_dll(turn_dll_t* after, turn_dll_t* new){
		new->next = after->next;
		after->next->prev = new;
		after->next = new;
		new->prev = after;
	}

	/* remove the given dll entry from the list. return the node before 'turn' such that

		add_turn_dll(splice_turn_dll(turn), turn);

	has net-zero-effect */
	turn_dll_t* splice_turn_dll(turn_dll_t* turn){
		turn_dll_t* set_to = turn->prev;
		// bypass
		turn->prev->next = turn->next;
		turn->next->prev = turn->prev;
		// loop to self (for later splicing)
		turn->next = turn;
		turn->prev = turn;
		return set_to;
	}

	void stdin_to_board(board_t* empty_board){
		// assuming well-formed inputs
		int rows = 0, cols = 0;
		char c = fgetc(stdin);
		while('0' <= c && c <= '9'){
			rows *= 10;
			rows += c-'0';
			c = fgetc(stdin);
		}
		c = fgetc(stdin);
		while('0' <= c && c <= '9'){
			cols *= 10;
			cols += c-'0';
			c = fgetc(stdin);
		}

		int n_squares = rows * cols;
		empty_board->squares = (square_t*) malloc(sizeof(square_t) * n_squares);
		memset(empty_board->squares, 0, n_squares);

		// create sentinel DLL node
		empty_board->valid_turns = make_turn_dll(0, 0, 0);

		// create all other valid turns
		// step 1: left/top for all grid spaces
		for(int r=0; r<rows; r++){
			for(int c=0; c<cols; c++){
				add_turn_dll(empty_board->valid_turns, make_turn_dll(r, c, LEFT));
				add_turn_dll(empty_board->valid_turns, make_turn_dll(r, c, TOP));
			}
		}
		// step 2: fill in the rightmost walls
		for(int r=0; r<rows; r++)
			add_turn_dll(empty_board->valid_turns, make_turn_dll(r, cols-1, RIGHT));
		// step 3: fill in the bottommost walls
		for(int c=0; c<cols; c++)
			add_turn_dll(empty_board->valid_turns, make_turn_dll(rows-1, c, BOTTOM));

		empty_board->rows = rows;
		empty_board->cols = cols;
		empty_board->player_turn = 0;
		empty_board->scores[0] = 0;
		empty_board->scores[1] = 0;
	}

	bool game_is_over(board_t* board){
		// game is over iff only the sentinel is left
		return board->valid_turns->next == board->valid_turns;
	}

	int opposite(int r, int c, wall_t typ, board_t* board){
		int i = r*board->cols + c; // flat index
		switch(typ){
		case TOP:
			if(r > 0) return i-board->cols;
			break;
		case BOTTOM:
			if(r < board->rows-1) return i+board->cols;
			break;
		case LEFT:
			if(c > 0) return i-1;
			break;
		case RIGHT:
			if(c < board->cols-1) return i+1;
			break;
		}
		return -1;
	}

	/* add a wall and return the number of completed boxes*/
	int add_wall(int r, int c, wall_t typ, board_t* board){
		int i = r*board->cols + c; // flat index
		board->squares[i] |= typ;

		int j = opposite(r, c, typ, board);
		if(j > -1){
			switch(typ){
			case TOP:
				board->squares[j] |= BOTTOM;
				break;
			case BOTTOM:
				board->squares[j] |= TOP;
				break;
			case LEFT:
				board->squares[j] |= RIGHT;
				break;
			case RIGHT:
				board->squares[j] |= LEFT;
				break;
			}
		}
		return board->squares[i] == 0xF + (j > -1 && board->squares[j] == 0xF);
	}

	/* remove wall and return the number of un-done boxes */
	int remove_wall(int r, int c, wall_t typ, board_t* board){
		int i = r*board->cols + c; // flat index
		int j = opposite(r, c, typ, board);
		int undone_boxes = board->squares[i] == 0xF + (j > -1 && board->squares[j] == 0xF);
		if(j > -1){
			switch(typ){
			case TOP:
				board->squares[j] &= ~BOTTOM;
				break;
			case BOTTOM:
				board->squares[j] &= ~TOP;
				break;
			case LEFT:
				board->squares[j] &= ~RIGHT;
				break;
			case RIGHT:
				board->squares[j] &= ~LEFT;
				break;
			}
		}
		board->squares[i] &= ~typ;
		return undone_boxes;
	}

	void print_board(board_t* board){
		for(int r=0; r<board->rows; r++){
			for(int c=0; c<board->cols; c++){
				int i = r*board->cols + c; // flat index
				printf("%d ", board->squares[i]);
			}
			printf("\n");
		}
		printf("%d : %d\n", board->scores[0], board->scores[1]);
	}

	void execute_turn(turn_dll_t* turn, board_t* board){
		int closed_boxes = add_wall(turn->row, turn->col, turn->wall, board);
		if(closed_boxes > 0){
			board->scores[board->player_turn] += closed_boxes;
		} else{
			board->player_turn = 1 - board->player_turn;
		}
	}

	void unexecute_turn(turn_dll_t* turn, board_t* board){
		int opened_boxes = remove_wall(turn->row, turn->col, turn->wall, board);
		if(opened_boxes > 0){
			board->scores[board->player_turn] -= opened_boxes;
		} else{
			board->player_turn = 1 - board->player_turn;
		}
	}

	void cleanup(board_t* board){
		free(board->squares);
		// free DLL
		while(board->valid_turns->next != board->valid_turns){
			turn_dll_t* rem = board->valid_turns->next;
			splice_turn_dll(rem);
			free(rem);
		}
		free(board->valid_turns);
	}

	/* generic printouts at end */
	void stats(board_t* board, turn_dll_t* best_turn, int best_outcome, long int count_turns){
		if(best_outcome > 0)
			printf("win\n");
		else if(best_outcome < 0)
			printf("lose\n");
		else
			printf("draw\n");

		char* typ = "";
		switch(best_turn->wall){
		case TOP:
			typ = "TOP";
			break;
		case BOTTOM:
			typ = "BOTTOM";
			break;
		case LEFT:
			typ = "LEFT";
			break;
		case RIGHT:
			typ = "RIGHT";
			break;
		}
		printf("best option: %d %d %s\n", best_turn->row, best_turn->col, typ);
		printf("with score %d\n", best_outcome);

		long int nwalls = board->rows*board->cols*2 + board->rows + board->cols;
		long int fact = 1, s = 0;
		for(long int i=nwalls; i>0; --i){fact *= i; s += fact; }
		printf("%ld walls\n", nwalls);
		printf("%ld search-space branches\n", s);
		printf("%ld turns taken\n", count_turns);
	}

## Notes on Complexity

Brute-force approaches to dots and boxes blow up in complexity _very quickly_. 

Consider a board with `R` rows and `C` columns. There are `R*C` squares, `R*(C+1)` vertical walls, and `C*(R+1)` horizontal walls. That is a total of `W = 2*R*C + R + C`.

Because Lembik asked us to _solve_ the game with minimax, we need to traverse to the leaves of the game tree. Let's ignore pruning for now, because what matters is orders of magnitude.

There are `W` options for the first move. For each of those, the next player can play any of the `W-1` remaining walls, etc.. That gives us a search-space of `SS = W * (W-1) * (W-2) * ... * 1`, or `SS = W!`. Factorials are huge, but that's only the beginning. `SS` is the number of _leaf nodes_ in the search space. More relevant to our analysis is the total number of decisions which had to be made (i.e. the number of _branches_ `B` in the tree). The first layer of branches has `W` options. For each of those, the next level has `W-1`, etc.

    B = W + W*(W-1) + W*(W-1)*(W-2) + ... + W!

    B = SUM W!/(W-k)!
      k=0..W-1

Let's look at some small table sizes:

	Board Size  Walls  Leaves (SS)      Branches (B)
	---------------------------------------------------
	1x1         04     24               64
	1x2         07     5040             13699
	2x2         12     479001600        1302061344
	2x3         17     355687428096000  966858672404689

These numbers are getting ridiculous. At least they explain why the brute-force code seems to hang forever on a 2x3 board. __The search-space of a 2x3 board is 742560 times larger than 2x2__. If 2x2 takes 20 seconds to complete, a conservative extrapolation predicts __over 100 days__ of execution time for 2x3. Clearly we need to prune.

## Pruning Analysis

I added in very simple pruning using the alpha-beta algorithm. Basically, it stops searching if an ideal opponent would never give it its current opportunities. "Hey look - I win by a lot if my opponent lets me get every square!", thought no AI, ever.

By stopping the search high in the tree, we can save _a lot_ of time by not going down to leaves. The 'Pruning Factor' is the fraction of all-possible-branches which we had to visit. Brute-force has a pruning factor of 1. The smaller it is, the better.


	Board Size  Branches         Brute-Force Time  Alpha-Beta Time  Alpha-Beta Branches  Pruning Factor
	----------------------------------------------------------------------------------------------------------
	1x1         64               0.001             0.001            30                   0.46875
	1x2         13699            0.001             0.001            727                  0.0530695671
	2x2         1302061344       21.5              0.015            659599               0.0005065806
	2x3         966858672404689  N/A               44.5             2170375995           2.24477067532737E-006

One very interesting result is that the pruning factor gets smaller as boards get bigger. This means that as the number of branches grows, the number which we can quickly discard grows faster!

![Log plot of pruning factor][1]

Sadly, this is not equivalent to saying that as boards get bigger, it takes proportionally less time to solve them. We're dealing with orders of complexity.

![Log plot of Alpha-Beta runtimes][2]


  [1]: http://i.stack.imgur.com/lAveI.jpg
  [2]: http://i.stack.imgur.com/1Zu2t.jpg